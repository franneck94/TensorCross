{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TensorCross","text":"<pre><code>pip install tensorcross\n</code></pre> <p>Cross Validation, Grid Search and Random Search for tf.data.Datasets in TensorFlow 2.0+ and Python 3.7+.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>Currently, there is the tf.keras.wrapper.KerasClassifier/KerasRegressor class, which can be used to transform your tf.keras model into a sklearn estimator. However, this approach is only applicable if your dataset is a numpy.ndarray for your x and y data. If you want to use the new tf.data.Dataset class, you cannot use the sklearn wrappers. This python package aims to help with this use-case.</p>"},{"location":"#api","title":"API","text":"<ul> <li>GridSearch</li> <li>GridSearchCV</li> <li>For more examples see: here</li> </ul>"},{"location":"#dataset-and-tensorflow-model-for-the-examples","title":"Dataset and TensorFlow Model for the Examples","text":"<pre><code>    import tensorflow as tf\n\n    dataset = tf.data.Dataset.from_tensor_slices(\n        (np.array([1, 2, 3]).reshape(-1, 1),  # x\n         np.array([-1, -2, -3]).reshape(-1, 1))  # y\n    )\n\n    def build_model(\n        optimizer: tf.keras.optimizers.Optimizer,\n        learning_rate: float\n    ) -&gt; tf.keras.models.Model:\n        x_input = tf.keras.layers.Input(shape=2)\n        y_pred = tf.keras.layers.Dense(units=1)(x_input)\n        model = tf.keras.models.Model(inputs=[x_input], outputs=[y_pred])\n\n        opt = optimizer(learning_rate=learning_rate)\n\n        model.compile(\n            loss=\"mse\", optimizer=opt, metrics=[\"mse\"]\n        )\n\n        return model\n</code></pre> <p>The dataset must be a tf.data.Dataset object and you have to define a function/callable that returns a compiled tf.keras.models.Model object. This object will then be trained in e.g. the GridSearch.</p>"},{"location":"#gridsearch-example","title":"GridSearch Example","text":"<p>Assuming you have a tf.data.Dataset object and a build_model function, defined as above. You can run a GridSearch as below:</p> <pre><code>    from tensorcross.model_selection GridSearch\n\n    train_dataset, val_dataset = dataset_split(\n        dataset=dataset,\n        split_fraction=(1 / 3)\n    )\n\n    param_grid = {\n        \"optimizer\": [\n            tf.keras.optimizers.Adam,\n            tf.keras.optimizers.RMSprop\n        ],\n        \"learning_rate\": [0.001, 0.0001]\n    }\n\n    grid_search = GridSearch(\n        model_fn=build_model,\n        param_grid=param_grid,\n        verbose=1,\n        num_features=1,\n        num_targets=1\n    )\n\n    grid_search.fit(\n        train_dataset=train_dataset,\n        val_dataset=val_dataset,\n        epochs=1,\n        verbose=1\n    )\n\n    grid_search.summary()\n</code></pre> <p>This would result in the following console output:</p> <pre><code>    --------------------------------------------------\n    Best score: 1.1800532341003418 using params: {\n        'learning_rate': 0.001, 'optimizer': 'RMSprop'\n    }\n    --------------------------------------------------\n    Idx: 0 - Score: 0.2754371166229248 with param: {\n        'learning_rate': 0.001, 'optimizer': 'Adam'\n    }\n    Idx: 1 - Score: 1.1800532341003418 with param: {\n        'learning_rate': 0.001, 'optimizer': 'RMSprop'\n    }\n    Idx: 2 - Score: 0.055416107177734375 with param: {\n        learning_rate': 0.0001, 'optimizer': 'Adam'\n    }\n    Idx: 3 - Score: 0.12417340278625488 with param: {\n        'learning_rate': 0.0001, 'optimizer': 'RMSprop'\n    }\n    --------------------------------------------------\n</code></pre>"},{"location":"#gridsearchcv-example","title":"GridSearchCV Example","text":"<p>Assuming you have a tf.data.Dataset object and a build_model function, defined as above. You can run a GridSearchCV as below:</p> <pre><code>    from tensorcross.model_selection GridSearchCV\n\n    param_grid = {\n        \"optimizer\": [\n            tf.keras.optimizers.Adam,\n            tf.keras.optimizers.RMSprop\n        ],\n        \"learning_rate\": [0.001, 0.0001]\n    }\n\n    grid_search_cv = GridSearchCV(\n        model_fn=build_model,\n        param_grid=param_grid,\n        n_folds=2,\n        verbose=1,\n        num_features=1,\n        num_targets=1\n    )\n\n    grid_search_cv.fit(\n        dataset=dataset,\n        epochs=1,\n        verbose=1\n    )\n\n    grid_search_cv.summary()\n</code></pre> <p>This would result in the following console output:</p> <pre><code>    --------------------------------------------------\n    Best score: 1.1800532341003418 using params: {\n        'learning_rate': 0.001, 'optimizer': 'RMSprop'\n    }\n    --------------------------------------------------\n    Idx: 0 - Score: 0.2754371166229248 with param: {\n        'learning_rate': 0.001, 'optimizer': 'Adam'\n    }\n    Idx: 1 - Score: 1.1800532341003418 with param: {\n        'learning_rate': 0.001, 'optimizer': 'RMSprop'\n    }\n    Idx: 2 - Score: 0.055416107177734375 with param: {\n        learning_rate': 0.0001, 'optimizer': 'Adam'\n    }\n    Idx: 3 - Score: 0.12417340278625488 with param: {\n        'learning_rate': 0.0001, 'optimizer': 'RMSprop'\n    }\n    --------------------------------------------------\n</code></pre>"},{"location":"api/","title":"API","text":""}]}